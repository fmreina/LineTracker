
FUNCTION_BLOCK tipper	// Block definition

VAR_INPUT				// input variables
	left_sensor : REAL;
	right_sensor : REAL;
END_VAR

VAR_OUTPUT				// output variable
	left_wheel : REAL;
	right_wheel : REAL;
END_VAR

FUZZIFY left_sensor			// Fuzzify input variable 'left_sensor'
//	TERM grande_negativa := (-10, 1) (-2, 1) (-1, 0) ;
	TERM negativa := (-2, 0) (-1, 1) (0, 0) ; 
	TERM zero := (0,1) ;
	TERM positiva := (0, 0) (1, 1) (2, 0) ; 
//	TERM grande_positiva := (1, 0) (2, 1) (10, 1);
END_FUZZIFY

FUZZIFY right_sensor			// Fuzzify input variable 'right_sensor'
//	TERM grande_negativa := (-10, 1) (-2, 1) (-1, 0) ;
	TERM negativa := (-2, 0) (-1, 1) (0, 0) ; 
	TERM zero := (0,1) ;
	TERM positiva := (0, 0) (1, 1) (2, 0) ; 
//	TERM grande_positiva := (1, 0) (2, 1) (10, 1);
END_FUZZIFY

DEFUZZIFY left_wheel			// Defzzzify output variable 'tip' 
	TERM forca_negativa := (-2, 1) (-1, 1) (0, 0) ; 
	TERM forca_zero := (0,1) ;
	TERM forca_positiva := (0, 0) (1, 1) (2, 1) ; 
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY right_wheel			// Defzzzify output variable 'tip' 
	TERM forca_negativa := (-2, 1) (-1, 1) (0, 0) ; 
	TERM forca_zero := (0,1) ;
	TERM forca_positiva := (0, 0) (1, 1) (2, 1) ; 
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF left_sensor IS negativa THEN left_wheel IS forca_positiva;
	RULE 2 : IF left_sensor IS negativa THEN right_wheel IS forca_negativa;
	RULE 3 : IF right_sensor IS negativa THEN right_wheel IS forca_positiva;
	RULE 4 : IF right_sensor IS negativa THEN left_wheel IS forca_negativa;
	
	RULE 5 : IF left_sensor IS positiva THEN left_wheel IS forca_positiva;
	RULE 6 : IF left_sensor IS positiva THEN right_wheel IS forca_negativa;
	RULE 7 : IF right_sensor IS positiva THEN right_wheel IS forca_positiva;
	RULE 8 : IF right_sensor IS positiva THEN left_wheel IS forca_negativa;
	
	RULE 9 : IF right_sensor IS positiva THEN left_wheel IS forca_negativa;
	RULE 10 : IF right_sensor IS positiva THEN left_wheel IS forca_negativa;
END_RULEBLOCK

END_FUNCTION_BLOCK
